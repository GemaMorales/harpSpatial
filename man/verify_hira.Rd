% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/verify_hira.R
\name{verify_hira}
\alias{verify_hira}
\title{Run spatial verification on a (for now) deterministic forecast}
\usage{
verify_hira(
  dttm,
  parameter,
  stations = harpCore::station_list,
  padding_i = 5,
  padding_j = 5,
  obs_path = ".",
  fcst_model = harpSpatial_hira_conf$fcst_model,
  lead_time = harpSpatial_hira_conf$lead_time,
  lt_unit = harpSpatial_hira_conf$lt_unit,
  scores = NULL,
  interp_method = "nearest",
  members = harpSpatial_hira_conf$members,
  fc_file_path = harpSpatial_hira_conf$fc_file_path,
  fc_file_template = harpSpatial_hira_conf$fc_file_template,
  fc_file_format = harpSpatial_hira_conf$fc_file_format,
  fc_file_opts = harpSpatial_hira_conf$fc_file_opts,
  fc_accumulation = harpSpatial_hira_conf$fc_accumulation,
  window_sizes = harpSpatial_hira_conf$window_sizes,
  thresholds = harpSpatial_hira_conf$thresholds,
  sqlite_path = harpSpatial_hira_conf$sqlite_path,
  sqlite_file = harpSpatial_hira_conf$sqlite_file,
  return_data = FALSE
)
}
\arguments{
\item{dttm}{A vector of date time strings to read. Can be in YYYYMMDD,
YYYYMMDDhh, YYYYMMDDhhmm, or YYYYMMDDhhmmss format. Can be numeric or
character. \code{\link[harpCore]{seq_dttm}} can be used to generate a
vector of equally spaced date-time strings.}

\item{parameter}{The parameters to read as a character vector.}

\item{fcst_model}{The name of the (deterministic or EPS) model.}

\item{lead_time}{The lead times to read as a numeric vector.
Should be in the units that are also used in fc_file_template.}

\item{lt_unit}{The unit used for lead_time. Can be "h" (hours), "m" (minutes), "s" (seconds)}

\item{members}{The (numbers of the) ensemble members to read. While Netcdf and grib2 files
can contain multiple members, for other formats we assume they are in separate files
(see also fc_file_template)}

\item{fc_file_path}{The top level path for the forecast files to read.}

\item{fc_file_template}{The file type to generate the template for. Can be
"harmoneps_grib", "harmeoneps_grib_fp", "harmoneps_grib_sfx", "meps_met",
"harmonie_grib", "harmonie_grib_fp", "harmone_grib_sfx", "vfld", "vobs", or
"fctable". If anything else is passed, it is returned unmodified. In this
case substitutions can be used. Available substitutions are \{YYYY\} for
year, \{MM\} for 2 digit month with leading zero, \{M\} for month with no
leading zero, and similarly \{DD\} or \{D\} for day, \{HH\} or \{H\} for
hour, \{mm\} or \{m\} for minute. Also \{LDTx\} for lead time and \{MBRx\}
for ensemble member where x is the length of the string including leading
zeros - can be omitted or 2, 3 or 4. Note that the full path to the file
will always be file_path/template.}

\item{fc_file_format}{The format of the files to read. Can be e.g. "fa" or "grib".}

\item{fc_file_opts}{A list with format-specific options for the reader function.}

\item{fc_accumulation}{The accumulation type of the forecast. This is only used for
accumulated parameters (e.g. precipitation). NULL signifies that the field is accumulated
from the start of the model run. Otherwise this should be a string containing a numerical value
and a time unit, e.g. "15m" or "1h".}

\item{window_sizes}{Scales used for fuzzy methods like FSS. A vector of box sizes.
All values must be odd integers (so the central point is really in the center of a box).}

\item{thresholds}{Thresholds used for FSS, ...}

\item{sqlite_path}{If specified, SQLite files are generated and written to
this directory.}

\item{sqlite_file}{Name of SQLite file.}

\item{return_data}{If TRUE, the result is returned as a list of tables.}

\item{by}{The time between forecasts. Should be a string of a number followed
by a letter, where the letter gives the units - may be "d" for days, "h" for
hours or "m" for minutes.}

\item{fc_domain}{The forecast domain. If provided, the fc reading can be made faster
by not extracting domain information (format option meta).}

\item{fc_interp_method}{Interpolation method to be used when transforming a forecast
field to the verification grid.}

\item{ob_file_path}{The top level path for the forecast files to read.}

\item{ob_file_template}{The file type to generate the template for. Can be
"harmoneps_grib", "harmeoneps_grib_fp", "harmoneps_grib_sfx", "meps_met",
"harmonie_grib", "harmonie_grib_fp", "harmone_grib_sfx", "vfld", "vobs", or
"fctable". If anything else is passed, it is returned unmodified. In this
case substitutions can be used. Available substitutions are {YYYY} for
year, \{MM\} for 2 digit month with leading zero, \{M\} for month with no
leading zero, and similarly \{DD\} or \{D\} for day, \{HH\} or \{H\} for
hour, \{mm\} or \{m\} for minute. Also \{LDTx\} for lead time and \{MBRx\}
for ensemble member where x is the length of the string including leading
zeros - can be omitted or 2, 3 or 4. Note that the full path to the file
will always be file_path/template.}

\item{ob_file_format}{The format of the files to read. Can be e.g. "hdf5" or "grib".}

\item{ob_file_opts}{A list with format-specific options for the reader function.}

\item{ob_domain}{The observation domain. If provided, the obs reading can be made faster
by not extracting domain information (format option meta).}

\item{ob_interp_method}{Interpolation method to be used when transforming a forecast
field to the verification grid.}

\item{ob_accumulation}{The accumulation type of the observation (or reference). This is only used for
accumulated parameters (e.g. precipitation). NULL signifies that the field is accumulated
from the start of the model run. That is probably rare for observations.
Otherwise this should be a string containing a numerical value
and a time unit, e.g. "15m" or "1h". "0" means an instantaneous value.}

\item{verif_domain}{A \code{geodomain} that defines the common verification grid.}

\item{...}{Not used at thispoint (more info to be added).}
}
\value{
A list containting tibbles for all scores.
}
\description{
Run spatial verification on a (for now) deterministic forecast
}
