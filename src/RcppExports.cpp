// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// sal_identify_objects
List sal_identify_objects(NumericMatrix indat, double threshold, NumericVector maxobj);
RcppExport SEXP _harpSpatial_sal_identify_objects(SEXP indatSEXP, SEXP thresholdSEXP, SEXP maxobjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indat(indatSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxobj(maxobjSEXP);
    rcpp_result_gen = Rcpp::wrap(sal_identify_objects(indat, threshold, maxobj));
    return rcpp_result_gen;
END_RCPP
}
// cumsum2d
NumericMatrix cumsum2d(NumericMatrix indat);
RcppExport SEXP _harpSpatial_cumsum2d(SEXP indatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indat(indatSEXP);
    rcpp_result_gen = Rcpp::wrap(cumsum2d(indat));
    return rcpp_result_gen;
END_RCPP
}
// windowMeanFromCumsum
NumericMatrix windowMeanFromCumsum(NumericMatrix indat, NumericVector radius);
RcppExport SEXP _harpSpatial_windowMeanFromCumsum(SEXP indatSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indat(indatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(windowMeanFromCumsum(indat, radius));
    return rcpp_result_gen;
END_RCPP
}
// windowMean
NumericMatrix windowMean(NumericMatrix indat, NumericVector radius);
RcppExport SEXP _harpSpatial_windowMean(SEXP indatSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type indat(indatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(windowMean(indat, radius));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_harpSpatial_sal_identify_objects", (DL_FUNC) &_harpSpatial_sal_identify_objects, 3},
    {"_harpSpatial_cumsum2d", (DL_FUNC) &_harpSpatial_cumsum2d, 1},
    {"_harpSpatial_windowMeanFromCumsum", (DL_FUNC) &_harpSpatial_windowMeanFromCumsum, 2},
    {"_harpSpatial_windowMean", (DL_FUNC) &_harpSpatial_windowMean, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_harpSpatial(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
